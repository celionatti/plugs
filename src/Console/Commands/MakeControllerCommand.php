<?php

declare(strict_types=1);

namespace Plugs\Console\Commands;

/*
|--------------------------------------------------------------------------
| Make: Controller Command
|--------------------------------------------------------------------------
*/

use Plugs\Console\Command;
use Plugs\Console\Support\Str;
use Plugs\Console\Support\Filesystem;

class MakeControllerCommand extends Command
{
    protected string $description = 'Create a new controller class with customizable options';

    public function handle(): int
    {
        $this->checkpoint('start');
        
        $name = $this->argument('0');
        
        if (!$name) {
            $name = $this->ask('What should we name the controller?', 'UserController');
        }
        
        if (!str_ends_with($name, 'Controller')) {
            $name .= 'Controller';
        }
        
        $this->info("Creating controller: {$name}");
        $this->line();
        
        $type = $this->choice(
            'What type of controller?',
            [
                'Basic Controller',
                'Resource Controller',
                'API Controller',
                'Invokable Controller'
            ],
            'Basic Controller'
        );
        
        $addMethods = [];
        
        if ($type !== 'Invokable Controller') {
            $addMethods = $this->multiChoice(
                'Which methods would you like to include?',
                ['index', 'create', 'store', 'show', 'edit', 'update', 'destroy'],
                $type === 'Resource Controller' ? ['index', 'create', 'store', 'show', 'edit', 'update', 'destroy'] : []
            );
        }
        
        $addComments = $this->confirm('Add PHPDoc comments?', true);
        $addTypeHints = $this->confirm('Add strict type declarations?', true);
        
        $this->checkpoint('options_collected');
        
        $this->line();
        $this->section('Generating Controller');
        
        $content = $this->task('Building controller structure', function() use ($name, $type, $addMethods, $addComments, $addTypeHints) {
            return $this->generateController($name, $type, $addMethods, $addComments, $addTypeHints);
        });
        
        $this->checkpoint('generation_complete');
        
        $path = $this->getControllerPath($name);
        $directory = dirname($path);
        
        if (Filesystem::exists($path)) {
            $this->warning("Controller already exists: {$path}");
            
            if (!$this->confirm('Do you want to overwrite it?', false)) {
                $this->info('Operation cancelled.');
                return 0;
            }
        }
        
        $this->task('Creating directory structure', function() use ($directory) {
            Filesystem::ensureDir($directory);
        });
        
        $this->task('Writing controller file', function() use ($path, $content) {
            Filesystem::put($path, $content);
        });
        
        $this->checkpoint('file_written');
        
        $this->line();
        $this->displaySuccessSummary($name, $path, $type, $addMethods);
        
        if ($this->isVerbose()) {
            $this->displayTimings();
        }
        
        return 0;
    }

    private function generateController(
        string $name, 
        string $type, 
        array $methods, 
        bool $addComments, 
        bool $addTypeHints
    ): string {
        $className = Str::studly($name);
        $namespace = 'App\\Controllers';
        
        $content = '';
        
        if ($addTypeHints) {
            $content .= "<?php\n\ndeclare(strict_types=1);\n\n";
        } else {
            $content .= "<?php\n\n";
        }
        
        $content .= "namespace {$namespace};\n\n";

        $content .= "use Plugs\\Base\\Controller\\Controller;\n";
        $content .= "use Psr\\Http\\Message\\ResponseInterface;\n\n";
        
        if ($addComments) {
            $content .= "/**\n";
            $content .= " * {$className}\n";
            $content .= " * \n";
            $content .= " * Generated by ThePlugs Console\n";
            $content .= " * @created " . date('Y-m-d H:i:s') . "\n";
            $content .= " */\n";
        }
        
        $content .= "class {$className} extends Controller\n{\n";
        
        if ($type === 'Invokable Controller') {
            $content .= $this->generateInvokeMethod($addComments, $addTypeHints);
        } else {
            foreach ($methods as $method) {
                $content .= $this->generateMethod($method, $addComments, $addTypeHints);
            }
        }
        
        $content .= "}\n";
        
        return $content;
    }

    private function generateMethod(string $methodName, bool $addComments, bool $addTypeHints): string
    {
        $method = "\n";
        
        if ($addComments) {
            $method .= "    /**\n";
            $method .= "     * " . ucfirst($methodName) . " method\n";
            $method .= "     */\n";
        }
        
        $returnType = $addTypeHints ? ': mixed' : '';
        
        $params = match($methodName) {
            'show', 'edit', 'update', 'destroy' => $addTypeHints ? 'int $id' : '$id',
            default => ''
        };
        
        $method .= "    public function {$methodName}({$params}){$returnType}\n";
        $method .= "    {\n";
        $method .= "        // TODO: Implement {$methodName} method\n";
        $method .= "    }\n";
        
        return $method;
    }

    private function generateInvokeMethod(bool $addComments, bool $addTypeHints): string
    {
        $method = "\n";
        
        if ($addComments) {
            $method .= "    /**\n";
            $method .= "     * Handle the incoming request\n";
            $method .= "     */\n";
        }
        
        $returnType = $addTypeHints ? ': mixed' : '';
        
        $method .= "    public function __invoke(){$returnType}\n";
        $method .= "    {\n";
        $method .= "        // TODO: Implement invokable controller logic\n";
        $method .= "    }\n";
        
        return $method;
    }

    private function getControllerPath(string $name): string
    {
        $basePath = getcwd() . '/app/Controllers';
        return $basePath . '/' . $name . '.php';
    }

    private function displaySuccessSummary(string $name, string $path, string $type, array $methods): void
    {
        $this->box(
            "Controller created successfully!\n\n" .
            "Name: {$name}\n" .
            "Type: {$type}\n" .
            "Path: {$path}\n" .
            "Methods: " . (empty($methods) ? 'Invokable' : count($methods)),
            "✅ Success",
            "success"
        );
        
        if (!empty($methods)) {
            $this->line();
            $this->section('Generated Methods');
            
            foreach ($methods as $method) {
                $this->success("  • {$method}()");
            }
        }
        
        $this->line();
        $this->section('Next Steps');
        
        $steps = [
            "1. Open the file: {$path}",
            "2. Implement your controller logic",
            "3. Register your routes",
            "4. Test your endpoints"
        ];
        
        foreach ($steps as $step) {
            $this->info("  {$step}");
        }
        
        $this->line();
        $this->note("Don't forget to add your controller to the routing configuration!");
    }
}